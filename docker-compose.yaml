x-othentic-cli: &othentic-cli
  env_file:
    - .env
  build:
    context: .
    dockerfile: ./Dockerfile

services:
  keeper:
    profiles: ["core"]
    image: trigg3rx/triggerx-keeper:0.1.6
    container_name: triggerx-keeper
    env_file:
      - .env
    command: [
        "sh",
        "./start-keeper.sh"
      ]
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY}
      - OPERATOR_ADDRESS=${OPERATOR_ADDRESS}
      - OPERATOR_RPC_PORT=${OPERATOR_RPC_PORT}
      - PUBLIC_IPV4_ADDRESS=${PUBLIC_IPV4_ADDRESS}
      - PEER_ID=${PEER_ID}
      - L1_RPC=${L1_RPC}
      - OTHENTIC_CLIENT_RPC_ADDRESS=${OTHENTIC_CLIENT_RPC_ADDRESS}
      - HEALTH_IP_ADDRESS=${HEALTH_IP_ADDRESS}
      - KEEPER_HOST=keeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.triggerx/cache:/home/triggerx/data/cache
      - ~/.triggerx/logs:/home/triggerx/data/logs
      - ~/.triggerx/peerstore:/home/triggerx/data/peerstore
    ports:
      - "${OPERATOR_RPC_PORT}:${OPERATOR_RPC_PORT}"
    restart: unless-stopped
    networks:
      - p2p
    group_add:
      - "${DOCKER_GROUP_ID:-999}"

  othentic:
    profiles: ["core"]
    container_name: triggerx-othentic
    <<: *othentic-cli
    env_file:
      - .env
    command: [
      "node",
      "attester",
      "/ip4/157.173.218.229/tcp/9876/p2p/${OTHENTIC_BOOTSTRAP_ID}",
      "--avs-webapi", "http://keeper",
      "--avs-webapi-port", "${OPERATOR_RPC_PORT}",
      "--l1-chain", "holesky",
      "--l2-chain", "base-sepolia",
      "--json-rpc.custom-message-enabled",
      "--p2p.port", "${OPERATOR_P2P_PORT}",
      "--p2p.datadir", "peerstore/othentic",
      "--p2p.discovery-interval", "60000",
      "--metrics",
      "--metrics.port", "${OPERATOR_METRICS_PORT}",
      "--announced-addresses", "/ip4/${PUBLIC_IPV4_ADDRESS}/tcp/${OPERATOR_P2P_PORT}/p2p/${PEER_ID}"
    ]
    environment:
      - L1_RPC=${L1_RPC}
      - L2_RPC=${L2_RPC}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - OPERATOR_ADDRESS=${OPERATOR_ADDRESS}
      - OPERATOR_P2P_PORT=${OPERATOR_P2P_PORT}
      - OPERATOR_METRICS_PORT=${OPERATOR_METRICS_PORT}
      - PUBLIC_IPV4_ADDRESS=${PUBLIC_IPV4_ADDRESS}
      - PEER_ID=${PEER_ID}
      - LOG_DIR=data/logs/othentic
      - OTHENTIC_BOOTSTRAP_ID=${OTHENTIC_BOOTSTRAP_ID}
      - KEEPER_HOST=keeper
    volumes:
      - ~/.triggerx/peerstore/othentic:/app/peerstore/othentic
      - ~/.triggerx/logs/othentic:/app/data/logs/othentic
    ports:
      - "${OPERATOR_P2P_PORT}:${OPERATOR_P2P_PORT}"
      - "${OPERATOR_METRICS_PORT}:${OPERATOR_METRICS_PORT}"
    depends_on:
      keeper:
        condition: service_started
    restart: unless-stopped
    networks:
      - p2p

  prometheus:
    profiles: ["monitoring"]
    image: prom/prometheus:latest
    container_name: triggerx-prometheus
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.listen-address=0.0.0.0:9090'
    environment:
      - OPERATOR_ADDRESS=${OPERATOR_ADDRESS}
      - PROMETHEUS_PORT=9090
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - p2p

  grafana:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    container_name: triggerx-grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=triggerx
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_HTTP_PORT=${GRAFANA_PORT}
      - PROMETHEUS_PORT=9090
      - OPERATOR_ADDRESS=${OPERATOR_ADDRESS}
    ports:
      - "${GRAFANA_PORT}:${GRAFANA_PORT}"
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - p2p

networks:
  p2p:
    driver: bridge

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
